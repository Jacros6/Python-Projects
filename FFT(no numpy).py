# -*- coding: utf-8 -*-
"""CS415Project2TrueFinal

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WrcscX16hWqtrHB0_cm0HUTrGt9BNQzc
"""

import math
import cmath
import random
def padZeros(x):
  i = 0
  while(len(x) > 2 ** i):
    i = i + 1
  xlength = len(x)
  for j in range(2**i - xlength):
    x.append(0)
  return x

def rounding(x):
  for i in range(len(x)):
    x[i] = round(x[i].real, 7) + round(x[i].imag, 7) * 1j
    if abs(x[i].real) < 0.0000001:
      x[i] = x[i].imag * 1j

    if abs(x[i].imag) < 0.0000001:
      x[i] = x[i].real
    if abs(x[i].real) < 0.0000001 and abs(x[i].imag) < 0.0000001:
      x[i] = 0
  return x

def clean(x):
  for i in range(len(x)-1 , 0, -1):
    if x[i] == 0:
      x.pop()
    else:
      return x
  return x

def padZerosInteger(x):
  i = 0
  while (x > 2 ** i):
    i = i + 1
  return i

def convolution(u, v):
  m = len(u)
  n = len(v)
  k = padZerosInteger(m + n - 1)
  for i in range(0, 2**k - m, 1):
    u.append(0)
  for i in range(0, 2**k - n, 1):
    v.append(0)
  c = 2 * math.pi * 1j
  w = (math.e**(c/2**k))
  u1 = FFT(u)
  u2 = FFT(v)
  u3 = [0] * 2**k
  for j in range (0, 2**k):
    u3[j] = u1[j] * u2[j]
  u4 = IFFT(u3)
  

  u4 = clean(u4)
  u4 = rounding(u4)
  u4 = clean(u4)
  return u4

def Poly(v):
  if len(v) == 1:
    v[0] = -v[0]
    v.append(1)
    return v
  n = len(v)
  v1 = v[:(n//2)]
  v2 = v[(n//2):]
  u1 = Poly(v1)
  u2 = Poly(v2)
  u = convolution(u1,u2)
  u = clean(u)
  u = rounding(u)
  return u

def FFT(x):
  n = len(x)
  if n == 1:
    return x
  else:
    c = 2 * math.pi * 1j
    w = (math.e**(c/n))
    wprev = 1
    xEven = x[::2]
    xOdd = x[1::2]
    yEven = FFT(xEven)
    yOdd = FFT(xOdd)
    y = []
    for i in range (n):
      y.append(x[i])
    for j in range (n//2):
      y[j] = yEven[j] + wprev * yOdd[j]
      y[j + n//2] = yEven[j] - wprev * yOdd[j]
      wprev = wprev * w

    return y

def IFFT(x):
  y = FFT(x)
  z=[]
  z.append(y[0])
  for i in range (len(y) - 1, 0, -1):
    z.append(y[i])
  for i in range (len(z)):
    z[i] = z[i]/len(x)
  return z

def padZerosTwo(x, y):
  if len(x)> len(y):
    n = len(x)
  elif len(x) < len(y):
    n = len(y)
  else:
    n = len(x)
  i = 0
  while(n > 2 ** i):
    i = i + 1
  for j in range(2**i - n):
    x.append(0)
  m = len(y)
  for j in range(2**i - m):
    y.append(0) 
  return x, y

def divide(a,b):
  n = len(a)
  m = len(b)
  a2, b2 = padZerosTwo(a, b)
  f1 = FFT(a2)
  f2 = FFT(b2)
  t = abs(len(f1))
  #print(t)
  f3 = [0] * t
  x = largestCoefficient(f2)
  for j in range (t):
    if f2[j] == 0:
      f2[1] = f2[1] + (random.uniform(0,0.0000001 * abs(x)))
      f1 = clean(f1)
      f2 = clean(f2)
      f1= rounding(f1)
      f2 = rounding(f2)
      return divide(f1, f2)
    f3[j] = f1[j] / f2[j]
  f4 = IFFT(f3)
  f4 = clean(f4)
  f4 = rounding(f4)
  f4 = clean(f4)
  return f4

def largestCoefficient(f2):
  x = float('-inf')
  for i in range (len(f2)):
    if x.real < f2[i].real:
      x = f2[i]

  return x

def main():
  print("input i for problem to do")
  i = input()
  while(i != '3'):
    if i == '1':
      print("input the name of a text file containing vector v")
      v = input()
      v1 = open(v, 'r')
      textv = v1.read()
      textv = textv.split(' ')
      problem1 = []
      for i in range(len(textv)):
        problem1.append(float(textv[i]))
      print(Poly(problem1))
    if i == '2':
      print("input the name of two text files containing vectors A and B. Input one text file then press enter and input the next text file")
      A = input()
      B = input()
      A1 = open(A, 'r')
      B1 = open(B, 'r')
      textA = A1.read()
      textB = B1.read()
      problem2A = textA.split(' ')
      problem2B = textB.split(' ')
      for i in range(len(problem2A)):
        problem2A[i] = float(problem2A[i])
      for j in range(len(problem2B)):
        problem2B[j] = float(problem2B[j])

      print(divide(problem2A, problem2B))
    if i == '3':
      return
    print("input i for problem to do")
    i = input()
  return

main()