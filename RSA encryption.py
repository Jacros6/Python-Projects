# -*- coding: utf-8 -*-
"""projec1cs415.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_F6Um_D5-9aiXd-B2jmTIkDknbzPcG-R
"""

import random

class Fraction:
  def __init__(self):
    self.q = 0
    self.p = 0

def main():
  print("input i for problem to do")
  i = input()
  while (i != '4'):
    if i == "1":
      problem3()
    if i == "2":
      print("input n for 4a")
      inp = int(input())
      fracAdd(inp)
    if i == "3":
      print("input n for 4b")
      inp = int(input())
      fracFibo(inp)
    print("input i for problem to do")
    i = input()
  return

def extendedEuclid(a, b):
  if (b == 0): return(1,0,a)
  (x, y, d) = extendedEuclid(b, a % b)
  return (y, x - (a//b)*y, d)

def createNumber(n):
  s = ''
  for i in range (n):
    s = s + str(random.randint(1, 9))
  return int(s)

def genPrime(n, k):
  N2 = n
  N3 = createNumber(n)
  while (primality3(N3, k) != True):
    N3 = createNumber(N2)
  return N3

def gcd(a, b):
  if (b == 0):
    return a
  return gcd(b, a % b)

def rando(N):
  return random.randint(2, N - 1)

def primality(N):

  a = rando(N)
  if (pow(a, N - 1, N) == 1):
    return True
  return False

def primality2(N, k):
  for i in range(k):
    if (primality(N) == True):
      return True
  return False

def primality3(N, k):
  if (N == 2 or N == 3 or N == 5 or N == 7):
    return True
  if (N % 2 == 0 or N % 3 == 0 or N % 5 == 0 or N % 7 == 0):
    return False
  else:
    return primality2(N, k)

def fracFibo(n):
  x = Fraction()
  y = Fraction()
  x.p = 3
  x.q = 7
  y.p = 1
  y.q = 19
  if (n == 0):
    print(y.p, " / ", y.q)
    return
  if (n == 1):
    print(x.p, " / ", x.q)
    return
  for i in range(n - 1):
    temp = mult(x.p, x.q, 3, 2)
    temp = add(temp.p, temp.q, y.p, y.q)
    res = temp
    y = x
    x = temp
  print(res.p, " / ", res.q)

def fracAdd(n):
  frac1 = Fraction()
  frac2 = Fraction()
  frac1.p = 1
  frac1.q = 1
  i = 2
  while ((frac1.p / frac1.q) < n):
    frac1 = add(frac1.p, frac1.q, 1, i)
    i = i + 1
  while (gcd(frac1.p, frac1.q) != 1):
    gcd2 = gcd(frac1.p, frac1.q)
    frac1.p = int(frac1.p/gcd2)
    frac1.q = int(frac1.q/gcd2)
  print(i)

def div(x0, y0, x1, y1):
  res = Fraction()
  a = (x0 * y1)
  b = (y0 * x1)
  gcd2 = gcd(a, b)
  res.p = int(a/gcd2)
  res.q = int(b/gcd2)
  return res

def mult(x0, y0, x1, y1):
  res = Fraction()
  a = (x0 * x1)
  b = (y0 * y1)
  gcd2 = gcd(a, b)
  res.p = int(a/gcd2)
  res.q = int(b/gcd2)
  return res

def add(x0, y0, x1, y1):
  res = Fraction()
  a = (x0 * y1) + (x1 * y0)
  b = (y0 * y1)
  gcd2 = gcd(a, b)
  res.p = int(a /gcd2)
  res.q = int(b /gcd2)
  return res

def problem3():
  print("input n where 1 < n <= 50")
  n = int(input())
  while (int(n) >= 51):
      print("n must be <= 50. input new number")
      n = input()
  print("input k where 1 < k <= 20")
  k = int(input())
  while (int(k) >= 21):
      print("k must be <= 20. input new number")
      k = input()

  p = genPrime(n, k)
  print(p)
  q = genPrime(n, k)
  print(q)
  N = q * p

  E = createNumber(n)
  while (gcd(E, (p - 1)*(q - 1)) != 1):
    E = createNumber(n)

  helper = extendedEuclid(E, ((p - 1) * (q - 1)))[0]

  D = helper + ((p - 1) * (q - 1))

  print("N is ", N, " E is ", E, " D is ", D)
  print("")
  print("Input integer M")


  M = int(input())

  C = pow(M, E, N)
  print(C)
  M2 = pow(C, D, N)
  print("result is")
  print(M2)

main()